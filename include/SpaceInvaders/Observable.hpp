////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2013 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef SPACE_INVADERS_OBSERVABLE_HPP
#define SPACE_INVADERS_OBSERVABLE_HPP

////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <map>
#include <functional>
#include <SpaceInvaders/Event.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Game
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Base class for all objects that can be observed
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    class Observable
    {
    public:

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Destructor
        ///
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual ~Observable();


        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Add an observer for a specific type of event
        ///
        /// @param function  The function to call when the event occurs
        /// @param eventType The type of event for which the function will be signaled
        ///
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        void addObserver(std::function<void(const Event&)> function, Event::Type eventType);


        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Remove all observers
        ///
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        void clearObservers();


        ////////////////////////////////////////////////////////////////////////////////////////////////////
    protected:

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Notify all observers that are interested in this particular event
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        void notifyObservers(const Event& event);


        ////////////////////////////////////////////////////////////////////////////////////////////////////
    private:
        std::map<Event::Type, std::vector<std::function<void(const Event&)>>> m_observers;
    };
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // SPACE_INVADERS_OBSERVABLE_HPP
