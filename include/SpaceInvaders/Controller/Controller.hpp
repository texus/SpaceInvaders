////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2013 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef SPACE_INVADERS_CONTROLLER_HPP
#define SPACE_INVADERS_CONTROLLER_HPP

////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <SpaceInvaders/Controller/EnemyController.hpp>
#include <SpaceInvaders/Controller/PlayerController.hpp>
#include <SpaceInvaders/Controller/WallController.hpp>
#include <SpaceInvaders/Controller/PowerupController.hpp>
#include <SpaceInvaders/Factory/AbstractEntityFactory.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Game
{
    namespace View
    {
        class AbstractView;
    }

    namespace Controller
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Class that has the main control over the level
        ///
        /// It also contains smaller subcontrollers to control more specific things.
        ///
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        class Controller : public Observable
        {
        public:

            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Constructor to initialize the controller
            ///
            /// @param view       Pointer to the view
            /// @param difficulty The difficulty of this level
            ///
            /// The parameters passes to this constructor are only needed for instantiating the entities.
            /// They aren't required for the real work that the controller does.
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            Controller(View::AbstractView* view, unsigned int difficulty);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Update all entities in this level
            ///
            /// @param elapsedTime  Time passed since the last time this function was called
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void update(const sf::Time& elapsedTime);


            ////////////////////////////////////////////////////////////////////////////////////////////////
        private:

            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// Called every frame to update the position of the bullets.
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void updateBullets(const sf::Time& elapsedTime);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// Called when the lives of the player changes.
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void livesChanged(const Event& event);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// Called when a powerup gets activated.
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void powerupActivated(const Event& event);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// Called when a powerup gets deactivated.
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void powerupDeactivated(const Event& event);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// Called when a bullet should be created.
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void createBullet(const Event& event);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// Called when an enemy has moved.
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void enemyMoved(const Event& event);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// Called when the score has changed.
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void scoreChanged(const Event& event);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// Called when the game was lost.
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void gameOver(const Event& event);


            ////////////////////////////////////////////////////////////////////////////////////////////////
        private:
            unsigned int m_difficulty;

            View::AbstractView *const m_view;
            std::unique_ptr<AbstractEntityFactory> m_factory;

            PlayerController  m_playerController;
            EnemyController   m_enemyController;
            WallController    m_wallController;
            PowerupController m_powerupController;

            std::vector<BulletPtr> m_bullets;

            float m_lowestEnemyPosition = 0;
        };
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // SPACE_INVADERS_CONTROLLER_HPP
