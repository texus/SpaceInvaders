////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2013 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef SPACE_INVADERS_ENTITIES_HPP
#define SPACE_INVADERS_ENTITIES_HPP

////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <SpaceInvaders/Model/Gun.hpp>
#include <SpaceInvaders/Observable.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Game
{
    namespace Model
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Base class for all entities
        ///
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        class Entity : public Observable
        {
        public:

            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Constructor to initialize the entity
            ///
            /// @param filename Filename of the image needed to display the entity
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            Entity(const std::string& filename);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Destructor
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            virtual ~Entity();


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Changes the position of the entity
            ///
            /// @param position New position of the entity
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void setPosition(const Vector2f& position);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Returns the position of the entity
            ///
            /// @return Current position of the entity
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            Vector2f getPosition() const;


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Changes the size of the entity
            ///
            /// @param size New size of the entity
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void setSize(const Vector2f& size);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Returns the size of the entity
            ///
            /// @return Current size of the entity
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            Vector2f getSize() const;


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Returns the filename of the image used to display the entity
            ///
            /// @return Filename which was passed to this model through the constructor
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            std::string getImageFilename() const;


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Destroyes the entity object
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            virtual void destroy();


            ////////////////////////////////////////////////////////////////////////////////////////////////
        protected:
            FloatRect m_area = FloatRect{0, 0, 0, 0};
            std::string m_imageFilename;
        };


        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Base class for all entities that can move and have a gun
        ///
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        class AttackingEntity : public Entity
        {
        public:

            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Constructor to initialize the entity
            ///
            /// @param filename Filename of the image needed to display the entity
            /// @param gun      The gun that will be connected to the entity
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            AttackingEntity(const std::string& filename, const Gun& gun);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Destructor
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            virtual ~AttackingEntity();


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Returns the gun that is connected to this entity
            ///
            /// @return Gun of the entity
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            Gun& getGun();


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Sets a moving speed for this entity
            ///
            /// @param speed Speed of the entity
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void setSpeed(float speed);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Returns the moving speed of the entity
            ///
            /// @return Speed of the entity
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            float getSpeed() const;


            ////////////////////////////////////////////////////////////////////////////////////////////////
        private:
            Gun   m_gun;
            float m_speed = 0;
        };


        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief The defense wall entity
        ///
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        class WallEntity final : public Entity
        {
        public:

            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Constructor to initialize the wall
            ///
            /// @param filename Filename of the image needed to display the wall
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            WallEntity(const std::string& filename);
        };


        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief The enemy entity
        ///
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        class EnemyEntity final : public AttackingEntity
        {
        public:

            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Constructor to initialize the enemy
            ///
            /// @param filename   Filename of the image needed to display the enemy
            /// @param gun        The gun attached to this enemy
            /// @param killPoints The score gain from killing this enemy
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            EnemyEntity(const std::string& filename, const Gun& gun, unsigned int killPoints);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Returns the points that you will receive when killing this enemy
            ///
            /// @return The score gain from killing this enemy
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            unsigned int getKillPoints() const;


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Destroyes the enemy object
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void destroy();


            ////////////////////////////////////////////////////////////////////////////////////////////////
        private:
            unsigned int m_killPoints;
        };


        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief The player entity
        ///
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        class PlayerEntity final : public AttackingEntity
        {
        public:

            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Constructor to initialize the player
            ///
            /// @param filename   Filename of the image needed to display the player
            /// @param gun        The gun attached to the player
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            PlayerEntity(const std::string& filename, const Gun& gun);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Sets the remaining lives of the player
            ///
            /// @param lives The lives that the player has left
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void setLives(unsigned int lives);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Returns the remaining lives of the player
            ///
            /// @return The lives that the player has left
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            unsigned int getLives() const;


            ////////////////////////////////////////////////////////////////////////////////////////////////
        private:
            unsigned int m_lives = 0;
        };


        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief The bullet entity
        ///
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        class BulletEntity : public Entity
        {
        public:

            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Constructor to initialize the bullet
            ///
            /// @param filename   Filename of the image needed to display the bullet
            /// @param speed      The speed of the bullet
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            BulletEntity(const std::string& filename, float speed);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Returns how fast the bullet moves
            ///
            /// @return The speed of the bullet
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            float getSpeed() const;


            ////////////////////////////////////////////////////////////////////////////////////////////////
        protected:
            float m_speed;
        };
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // SPACE_INVADERS_ENTITIES_HPP
