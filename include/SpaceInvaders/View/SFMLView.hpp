////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2013 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef SPACE_INVADERS_SFML_VIEW_HPP
#define SPACE_INVADERS_SFML_VIEW_HPP

////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <SpaceInvaders/View/AbstractView.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Game
{
    namespace View
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief View that uses SFML to create a window and draws the entities on that window
        ///
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        class SFMLView : public AbstractView
        {
        public:

            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Constructor to initialize the view
            ///
            /// @param gameState State of the game
            /// @param score     Current score to be displayed
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            SFMLView(GameState gameState, unsigned int score);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Add an entity to the view
            ///
            /// @param entity  The entity to be added to the view
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void addEntity(const EntityPtr entity);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Poll the events from the sfml window and send messages to anyone interested
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void handleEvents();


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Draw the current game screen on the window
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void draw();


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Display a message on the screen
            ///
            /// @param message  Message to show
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void setMessage(const std::string& message);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Stop showing the message
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void removeMessage();


            ////////////////////////////////////////////////////////////////////////////////////////////////
        private:

            ////////////////////////////////////////////////////////////////////////////////////////////////
            // Callback function for when the score is changed.
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void scoreChanged(const Event& event);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            // Called when the lives have changed.
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void updateLives(unsigned int lives);


            ////////////////////////////////////////////////////////////////////////////////////////////////
        private:
            sf::RenderWindow m_window;

            GameState m_gameState;

            sf::Font m_font;
            sf::Text m_score;
            sf::Text m_lives;
            sf::Text m_message;

            sf::Texture m_backgroundTexture;
            sf::Sprite  m_backgroundSprite;
        };
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // SPACE_INVADERS_SFML_VIEW_HPP
