////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2013 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef SPACE_INVADERS_ABSTRACT_VIEW_HPP
#define SPACE_INVADERS_ABSTRACT_VIEW_HPP

////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <SpaceInvaders/Observable.hpp>
#include <SpaceInvaders/View/AbstractEntityRepresentation.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Game
{
    class Event;

    namespace View
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Abstract class to display the game in some way
        ///
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        class AbstractView : public Observable
        {
        public:

            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Destructor
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            virtual ~AbstractView() {};


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Add an entity to the view
            ///
            /// @param entity  The entity to be added to the view
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            virtual void addEntity(const EntityPtr entity) = 0;


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Handle the incoming events in some way
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            virtual void handleEvents() = 0;


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Draw the game in some way
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            virtual void draw() = 0;


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Display a message in some way
            ///
            /// @param message  Message to show
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            virtual void setMessage(const std::string& message) = 0;


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Stop showing a message
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            virtual void removeMessage() = 0;


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Called when an entity gets destroyed
            ///
            /// @param event          The event that brings the news about the destroyed entity
            /// @param representation The entity representation which should no longer be displayed
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void entityDestroyed(const Event& event, AbstractEntityRepresentation* representation);


            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Called when the lives of the player are changed
            ///
            /// @param event The event that brings the news about the changed lives
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            void livesChanged(const Event& event);


            ////////////////////////////////////////////////////////////////////////////////////////////////
        protected:

            ////////////////////////////////////////////////////////////////////////////////////////////////
            /// @brief Changes the displayed lives
            ///
            /// @param lives  New amount of lives
            ///
            /// This function is called by \a livesChanged to alert the derived classes about the event.
            ///
            ////////////////////////////////////////////////////////////////////////////////////////////////
            virtual void updateLives(unsigned int lives) = 0;


            ////////////////////////////////////////////////////////////////////////////////////////////////
        protected:
            std::vector<std::unique_ptr<AbstractEntityRepresentation>> m_entities;
        };
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // SPACE_INVADERS_ABSTRACT_VIEW_HPP
